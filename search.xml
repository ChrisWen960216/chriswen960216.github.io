<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于我</title>
    <url>/2020/10/14/about-me/</url>
    <content><![CDATA[<center>

<p>悲伤或许有</p>
<p>痛苦或许很多</p>
<p>但是我想</p>
<p>还有很多梦想未醒</p>
<p>世界很大</p>
<p>风住过这里</p>
</center>




]]></content>
      <categories>
        <category>他说</category>
      </categories>
      <tags>
        <tag>他说</tag>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2020/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<blockquote>
<p>学习算法和数据结构时，对于二叉树的一些总结</p>
</blockquote>
<a id="more"></a>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>二叉树是一个联通的无环图，有了根节点之后，每个顶点定义了唯一的父节点，和最多两个子节点。并且严格区分左子树，右子树，子树是有序不可颠倒的。</p>
<h2 id="具象化"><a href="#具象化" class="headerlink" title="具象化"></a>具象化</h2><p>二叉树的每一个节点由熟悉的<code>JavaScript</code>来进行构造，就会是如下方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value = null, left = null, right = null) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下的一棵二叉树:<br><img src='/images/tree.png' alt='sample_binary_tree'></p>
<p>如果用<code>JavaScript</code>彻底展开构造的话，会是这个样子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  value: <span class="number">3</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    value: <span class="number">9</span>,</span><br><span class="line">    left: <span class="literal">null</span>,</span><br><span class="line">    right: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    value: <span class="number">20</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      value: <span class="number">15</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      value: <span class="number">7</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般来说对二叉树进行操作时，不会将一整棵树的结构全部写出。通常采用一定的顺序对树的节点进行操作，而二叉树的重点也在于此。</p>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>遍历就是按照一定的顺序浏览一棵树的每一个节点，一般来说遍历有三种方式：</p>
<ol>
<li>前序遍历：先访问当前节点，再访问左节点，再访问右节点</li>
<li>中序遍历：先访问左节点，再访问当前节点，再访问右节点</li>
<li>后序遍历：先访问左节点，再访问右节点，再访问当前节点</li>
</ol>
<p>用代码来解释的话是如下方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelNode</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 前序: callback(node);</span></span><br><span class="line">  travelNode(node.left);</span><br><span class="line">  <span class="comment">// 中序: callback(node);</span></span><br><span class="line">  travelNode(node.right);</span><br><span class="line">  <span class="comment">// 后序: callback(node);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>二叉树的核心就是遍历方法，使用遍历几乎可以搞定二叉树的所有问题。</p>
<ol>
<li><p>二叉树的深度：二叉树的深度等于于它最长路径（根-叶子）的长度。只需要通过<code>遍历</code>求得所有路径长度再取最大值即可。这是 <a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/">LeetCode 原题: 二叉树的深度 </a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxDepth</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  travelNode(root, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">travelNode</span>(<span class="params">node, depth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node.left &amp;&amp; !node.right) &#123;</span><br><span class="line">      result = <span class="built_in">Math</span>.max(result, depth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">      travelNode(node.left, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">      travelNode(node.right, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并两棵二叉树：通过<code>遍历</code>获得两棵二叉树的节点值，将目标树合并到根数上即可。这是<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">LeetCode 原题：合并二叉树</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeTrees</span>(<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!t2) &#123;</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!t1) &#123;</span><br><span class="line">    <span class="keyword">return</span> t2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  t2.val = t2.val + t1.val;</span><br><span class="line">  t2.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">  t2.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">  <span class="keyword">return</span> t2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelNode</span>(<span class="params">node, root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node.left &amp;&amp; !node.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">    root.left</span><br><span class="line">      ? (root.left.val = root.left.val + node.left.val)</span><br><span class="line">      : (root.left = <span class="keyword">new</span> TreeNode(node.left.val));</span><br><span class="line">    travelNode(node.left, root.left);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">    root.right</span><br><span class="line">      ? (root.right.val = root.right.val + node.right.val)</span><br><span class="line">      : (root.right = <span class="keyword">new</span> TreeNode(node.right.val));</span><br><span class="line">    travelNode(node.right, root.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>树的遍历无非就是<code>迭代</code>和<code>递归</code>。三种常见的遍历方式的区别取决于何时处理当前节点。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>开篇</title>
    <url>/2020/09/21/%E5%BC%80%E7%AF%87/</url>
    <content><![CDATA[<img src='/images/rain.png'>

<center>

<p>我有一些故事</p>
<p>让他们就这么老去 有些不妥</p>
<p>在这个落雨的夜晚</p>
<p>我把他们都讲给你听</p>
</center>
]]></content>
      <categories>
        <category>他说</category>
      </categories>
      <tags>
        <tag>他说</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的前序遍历</title>
    <url>/2020/10/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<blockquote>
<p>Leetcode 每日一题 - 144. 二叉树的前序遍历 思路</p>
</blockquote>
<a id="more"></a>

<h2 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h2><p>给定一个二叉树，返回前序遍历。</p>
<p>特别的: 通过迭代而不是递归完成</p>
<h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><p>我认为二叉树的遍历就如同数学公式，前中后序遍历相差无几，递归的算法极其简单:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelNode</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 前序: callback(node);</span></span><br><span class="line">  travelNode(node.left);</span><br><span class="line">  <span class="comment">// 中序: callback(node);</span></span><br><span class="line">  travelNode(node.right);</span><br><span class="line">  <span class="comment">// 后序: callback(node);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代算法"><a href="#迭代算法" class="headerlink" title="迭代算法"></a>迭代算法</h2><p>迭代和递归的区别在于一个是循环，一个是调用本身。</p>
<p>同时，递归始终可以改成迭代。并且递归是通过调用栈层层调用，即将调用的所有函数全部压入调用栈然后再挨个弹出执行，可能会导致<code>栈溢出</code>的问题。而迭代则是占用事件队列，当当前事件完成后立刻进行下一次的执行，不会造成<code>栈溢出</code>的问题。</p>
<p>再重复一遍: <code>递归始终可以改成迭代/循环</code>。</p>
<p>本题思路:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preorderTraversal</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123; <span class="keyword">return</span> result; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> stack = [root];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过栈来将递归改成循环</span></span><br><span class="line">    <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> current = stack.pop();</span><br><span class="line">      </span><br><span class="line">      result.push(current.val);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(current.right)&#123;</span><br><span class="line">        stack.push(current.right);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(current.left)&#123;</span><br><span class="line">        stack.push(current.left);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>固定团智能计划V1.0发布</title>
    <url>/2020/10/28/%E5%9B%BA%E5%AE%9A%E5%9B%A2%E6%99%BA%E8%83%BD%E8%AE%A1%E5%88%92V1-0%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<blockquote>
<p>隆重为你介绍 固定团智能计划V1.0 版本</p>
</blockquote>
<a id="more"></a>

<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li><p>各位团长可以创建自定义团队排表，并发给团员，团员通过团队ID/登记链接进行自己的团队登记，从而方便管理每一车副本的人员信息。</p>
</li>
<li><p>团队的每一位角色都可以被团长/团员定制，包括门派、游戏角色ID和使用本号打本的团员ID，三者之间没有耦合，方便满足 专职叫老板登/专职上号打本 等各种角色的团员登记。</p>
</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><p>免费！</p>
</li>
<li><p>简单的操作流程，你甚至都不用登录，更不需要注册。对懒人极其友好。</p>
</li>
<li><p>高度的自定义团队每一位成员，包括门派、游戏角色ID和上号团员的ID。亦或者什么都不设置，一键创建团队排表。</p>
</li>
<li><p>不要求登记任何账号密码，亦不要求绑定任何角色，个人 游戏/三次元 信息安全无忧。</p>
</li>
<li><p>无需手动输入 团队/个人ID，点击即可复制粘贴，解放双手。</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>微信搜索: <code>固定团智能计划</code></p>
</li>
<li><p>QQ搜索: <code>开团小助手</code></p>
</li>
<li><p>直接用微信扫描该二维码直接打开.</p>
</li>
</ul>
<img src='/images/ga/qrcode.jpg' />

<h2 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h2><ul>
<li>首页</li>
</ul>
<img src='/images/ga/main.png' />

<ul>
<li>个人<ul>
<li>点击左上角个人头像,会复制个人ID到剪贴板，方便我们追踪您的数据问题。</li>
<li>点击右上角的胶囊按钮，可以分享该小程序到对应的QQ/微信。</li>
</ul>
</li>
</ul>
<img src='/images/ga/user.png' />

<ul>
<li>创建团队</li>
</ul>
<img src='/images/ga/create.png' />

<ul>
<li>登记团队<ul>
<li>点击右上角的胶囊按钮，可以分享该小程序到对应的QQ/微信。</li>
</ul>
</li>
</ul>
<img src='/images/ga/add.png' />

<ul>
<li>分享<ul>
<li>可以直接将团队登记面板通过微信发送给团队成员，点击链接直接登记信息</li>
</ul>
</li>
</ul>
<img src='/images/ga/share.png'>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>因为平台受限，QQ小程序和微信小程序数据不互通。为了保持一致以及后续的迭代，请各位团长最好专一的使用其中的一个。</li>
<li>不论是QQ还是微信小程序，功能总是会同步更新（平台审核速度的可能会影响更新的速度，但是绝大多数情况下会在同一天提交给腾讯进行审核）</li>
</ul>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><ul>
<li>QQ：957638221</li>
<li>微信: Wen_Christian</li>
</ul>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><input type='checkbox' checked/> 团队人员出勤统计<br><input type='checkbox' checked/> 模板云端保存<br><input type='checkbox' checked/> 新的团队管理模式<br><input type='checkbox' /> 团长权限分享<br><input type='checkbox' /> 一键报名/取消</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>固定团智能计划使用介绍</title>
    <url>/2020/11/23/%E5%9B%BA%E5%AE%9A%E5%9B%A2%E6%99%BA%E8%83%BD%E8%AE%A1%E5%88%92%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>固定团智能计划（简称：开团小助手）简单使用介绍</p>
</blockquote>
<a id="more"></a>

<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本小程序虽然基于QQ/微信，但并未收集用户的任何敏感信息（包括但不限于QQ号、微信号、手机等），仅通过唯一用户ID进行身份区分。</p>
<p>本小程序仅需要用户授权您登记于QQ上的公开身份资料如：昵称、头像，皆保存于本地，云端数据库不做存储。</p>
<p>您可以点击右上角胶囊按钮-用户信息取消授权。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>微信搜索: <code>固定团智能计划</code></p>
</li>
<li><p>QQ搜索: <code>开团小助手</code></p>
</li>
<li><p>直接用微信扫描该二维码直接打开.</p>
</li>
</ul>
<img src='/images/ga/qrcode.jpg' />

<ul>
<li>直接用QQ扫描该二维码打开.</li>
</ul>
<img src='/images/ga/qq_qrcode.jpeg'>


<h2 id="团长"><a href="#团长" class="headerlink" title="团长"></a>团长</h2><p>注意：本使用说明的平台为QQ小程序，微信小程序操作相同，不再重复说明。</p>
<h3 id="1-登录-（必须）"><a href="#1-登录-（必须）" class="headerlink" title="1. 登录 （必须）"></a>1. 登录 （必须）</h3><p>  <span style='color: red;'>点击首页的 立即体验 按钮登录。</span></p>
<p>  团长角色必须登录用以后台记录权限。</p>
<p>  初次使用本小程序，需要您授权小程序使用您登记于QQ的公开资料，上述《声明》已经列出，不再展开叙述。</p>
<h3 id="2-用户中心界面"><a href="#2-用户中心界面" class="headerlink" title="2. 用户中心界面"></a>2. 用户中心界面</h3>  <img src='/images/ga_introduce/user.jpeg'>

<p>  我要开团 - 提供团长开团功能</p>
<p>  出勤统计 - 提供团长查看您参加您组织的团队的团员出勤情况</p>
<p>  用户详情 - 展示用户ID，即更新固定团团员名称</p>
<p>  我的团队 - 查找您创建过的团队</p>
<p>  我要参团 - 通过团队ID进行搜索并加入一个团</p>
<p>  模板管理 - 对于 权限·排表 类型的团队的模板管理</p>
<p>  关于我们&amp;&amp;疑难解答 - 展示页</p>
<h3 id="3-更新用户详情-（非必须，推荐）"><a href="#3-更新用户详情-（非必须，推荐）" class="headerlink" title="3. 更新用户详情 （非必须，推荐）"></a>3. 更新用户详情 （非必须，推荐）</h3>  <img src='/images/ga_introduce/user_info.jpeg'>

<p>  <span style='color: red;'>点击用户详情。</span></p>
<p>  用户ID作为唯一表示符，您不需要对此进行任何操作，仅在出现BUG时方便开发者追踪。</p>
<p>  您可以于此填写您的团员ID，更新后的团员ID将会出现在团长的考勤列表上展示（如果不更新，将展示为匿名）为了方便追踪和管理，强烈建议您更新。</p>
<h3 id="4-开团-（核心）"><a href="#4-开团-（核心）" class="headerlink" title="4. 开团 （核心）"></a>4. 开团 （核心）</h3>  <img src='/images/ga_introduce/group_mode.jpeg'>

<p>  <span style='color: red;'>点击我要开团。</span></p>
<p>  简单排表模式 - 非常简单的操作，类似于表格的共享登记。及其简单方便，但是功能也很有限</p>
<p>  权限排表模式 - 推荐模式，可以追踪团员、展示考勤等。后续介绍将基于此模式</p>
  <img src='/images/ga_introduce/group_panel.jpeg'>

<p>  团队名称 - 副本名称，目前仅支持25普通达摩洞和英雄达摩洞</p>
<p>  启用权限 - 启用后可以进行追踪，建议开启</p>
<p>  团队面板 - 团队成员登记处</p>
<p>  备注 - 添加本团的注意事项，他会在分享时被优先给出</p>
  <img src='/images/ga_introduce/panel_item.jpeg'>

<p>  团队面板的每一个格子被分为了3个模块，分别是心法、角色和团员。</p>
<p>  这三个模块并没有强绑定，这意味着：</p>
<p>  团长填写职业为傲血</p>
<p>  团员A填写角色</p>
<p>  团员A填写团员</p>
<p>  <span style='color: blue;'>适用场景：团长需要一个傲血，A登记参团，自己的号是傲血，自己也要打本。一般固定团报名会较多如此使用。</span></p>
<p>  或者说：</p>
<p>  团长填写职业为傲血</p>
<p>  团员A填写角色</p>
<p>  团员B填写团员</p>
<p>  <span style='color: blue;'>适用场景：团长需要一个傲血，A于世界频道找到一个傲血老板号，但A本身并不打本（例如金团客服）。B是傲血打手，则B可以认领该号并进行游戏。适用于金团/代清等</span></p>
<p>  或者说：</p>
<p>  团员A填写职业为傲血</p>
<p>  团员B填写角色</p>
<p>  团员A填写团员</p>
<p>  <span style='color: blue;'>适用场景：A是代清，但是A没有天策号。B是号主，但是B只想提供自己的账号不想打本。适用于金团/代清等</span></p>
<p>  当团长创建完成之后，可以将自己的设置保存为模板，后续可以复用本配置而不需要重新设置。</p>
<p>  <span style='color:red;'>而后可以点击右上角的胶囊按钮（三个点），将本团队面板分享到群内/好友，团员点击分享的小程序进去填写自己的信息。</span></p>
<p>  而一个完整的报名结束后可能会是如下的样子:</p>
  <img src='/images/ga_introduce/group_detail.jpeg'>

<p>  <span style='color:red;'>数据来源: 电信八区 - 剑湖宫</span></p>
<p>  其画横线的即代表尚缺，例如此时明教T由黎安宁上号但是仍然需要一个人提供明教T的号。而衍天虽然有号却没有打手。</p>
<p>  点击保存模板 - 则将此时此刻所有的团员信息进行保存。后续可以通过用户界面的 - 模板管理直接复用，或者于团队创建界面 点击 - 使用模板 进行复用。</p>
<p>  模板保存可以在团队创建之后-团队锁定之前的任意时刻进行。</p>
<p>  结束报名 - 点击结束报名之后，该团的信息将被封存并且不能被任何人修改（团长也不能改），其打手将被计入考勤展示于考勤面板上。</p>
<h3 id="5-权限-（核心）"><a href="#5-权限-（核心）" class="headerlink" title="5. 权限 （核心）"></a>5. 权限 （核心）</h3><p>  如果开启了权限管理，那么团队列表将会严格控制权限，举例来说：</p>
<p>  团员A填写职业为傲血</p>
<p>  团员B填写角色</p>
<p>  团员一栏是空着的</p>
<p>  那么团员A可以修改职业一栏，团员B可以修改角色一栏。除此之外，任何其他团员都无权修改任何一栏。</p>
<p>  但是任意团员都可以填写团员一栏。</p>
<p>  团长总是可以修改所有信息，而且经由团长修改过的信息则所有团员都无权修改。</p>
<p>  <span style='color:red;'>简单地说：空白栏大家都可以填，但是自己只能修改自己填过的信息。</span></p>
<p>  <span style='color:red;'>团长可以修改所有的信息，但是一经团长修改则所有团员都无权再次修改。</span></p>
<h3 id="6-考勤"><a href="#6-考勤" class="headerlink" title="6. 考勤"></a>6. 考勤</h3><p>  于考勤列表页可以看到所有参加团队团员的出勤情况，按照从高到低的次序进行排列。如果团员没有更新自己的团队ID，则会显示匿名。</p>
<h2 id="团员"><a href="#团员" class="headerlink" title="团员"></a>团员</h2><h3 id="1-登录-（必须）-1"><a href="#1-登录-（必须）-1" class="headerlink" title="1. 登录 （必须）"></a>1. 登录 （必须）</h3><p>  <span style='color: red;'>点击首页的 立即体验 按钮登录。</span></p>
<p>  团长角色必须登录用以后台记录权限。</p>
<p>  初次使用本小程序，需要您授权小程序使用您登记于QQ的公开资料，上述《声明》已经列出，不再展开叙述。</p>
<h3 id="2-更新用户详情-（非必须，推荐）"><a href="#2-更新用户详情-（非必须，推荐）" class="headerlink" title="2. 更新用户详情 （非必须，推荐）"></a>2. 更新用户详情 （非必须，推荐）</h3>  <img src='/images/ga_introduce/user_info.jpeg'>

<p>  <span style='color: red;'>点击用户详情。</span></p>
<p>  用户ID作为唯一表示符，您不需要对此进行任何操作，仅在出现BUG时方便开发者追踪。</p>
<p>  您可以于此填写您的团员ID，更新后的团员ID将会出现在团长的考勤列表上展示（如果不更新，将展示为匿名）为了方便追踪和管理，强烈建议您更新。</p>
<h3 id="3-报名"><a href="#3-报名" class="headerlink" title="3. 报名"></a>3. 报名</h3><p>  点击团长分享到群里的小程序，进行登记（如果尚未登录，则会自动返回到主页，登录之后方可填写）</p>
<p>  请注意：您只能填写空白项，无权修改别人所填写的内容。</p>
<h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>如果您有BUG或者什么好的建议反馈 欢迎联系作者，或者加入我们的反馈群:</p>
<p>QQ: 957638221</p>
<p>微信：Wen_Christian</p>
<p>QQ群: 1062571121</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>监听本地端口</title>
    <url>/2021/01/13/%E7%9B%91%E5%90%AC%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p>端口被占用了，但是CLI是怎么知道的？</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知其然，需知其所以然。因公司架构重组，前端分崩离析，缺乏统一的前端组来维护各类<code>legacy</code>工具，求人不如求己，遂决定通读并分析现行使用的各类内部库，以期了解项目的基本架构。</p>
<p>本篇是第一篇，监听本地端口。</p>
<a id="more"></a>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>绝大多数脚手架，例如<code>create-react-app</code>、<code>egg.js</code>这种，当启动工程的端口处于占用时，会自动提示类似的消息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">? Something is already running on port 3000. Probably:</span><br><span class="line">  *******</span><br><span class="line"></span><br><span class="line">Would you like to run the app on another port instead?</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>公司内部的CLI同样有这个功能，在流水线中，是这样设计这部分代码的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...context</span></span><br><span class="line"><span class="keyword">return</span> choosePort(host, port).then(<span class="function">(<span class="params">newPort</span>) =&gt;</span> executeDevServer(newPort, host));</span><br></pre></td></tr></table></figure>

<p>可以看到，首先是<code>choosePort</code>选择对应的端口，然后返回一个可以使用的端口号来给<code>executeDevserver</code>函数启动服务。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p><code>choosePort</code> 函数分为两个部分：</p>
<ol>
<li>查找对应的端口是否可用，如果不可用，则提供一个新的端口；</li>
<li>如果提供了新的端口，则于命令行中询问用户是否接受新的端口号。</li>
</ol>
<p>我拆去了一些容错和注释，将主要的代码剥离如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> detect = <span class="built_in">require</span>(<span class="string">&#x27;detect-port-alt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> isRoot = <span class="built_in">require</span>(<span class="string">&#x27;is-root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">choosePort</span>(<span class="params">host, defaultPort</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> detect(defaultPort, host).then(</span><br><span class="line">    (port) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第一部分： 判断端口是否合法</span></span><br><span class="line">      <span class="keyword">if</span> (port === defaultPort) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(defaultPort);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 第二部分：如果提供了新的端口，则询问用户</span></span><br><span class="line">      <span class="keyword">const</span> message = process.platform !== <span class="string">&#x27;win32&#x27;</span> &amp;&amp; defaultPort &lt; <span class="number">1024</span> &amp;&amp; !isRoot()</span><br><span class="line">        ? <span class="string">&#x27;Admin permissions are required to run a server on a port below 1024.&#x27;</span></span><br><span class="line">        : <span class="string">`Something is already running on port <span class="subst">$&#123;defaultPort&#125;</span>.`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> question = &#123;</span><br><span class="line">        type: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;shouldChangePort&#x27;</span>,</span><br><span class="line">        message:</span><br><span class="line">            <span class="string">`<span class="subst">$&#123;chalk.yellow(</span></span></span><br><span class="line"><span class="string"><span class="subst">              <span class="string">`<span class="subst">$&#123;message&#125;</span>`</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">            )&#125;</span>\n\nWould you like to run the app on another port instead?`</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      inquirer.prompt(question).then(<span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (answer.shouldChangePort) &#123;</span><br><span class="line">          resolve(port);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这个函数本质上是用了两个第三方库来共同完成这个需求= =！</p>
<p>一个是<code>detect-port-alt</code>，用来监听端口并返回一个可用的端口号。如果返回的端口号和传入的相同，那么证明原端口可用，直接<code>resolve(port)</code>【第10-12行】，如果不一样，则流入第二步。</p>
<p>第二个则是<code>inquirer</code>，用来在终端展示一个交互问答，监听用户的输入并作出对应的选择。</p>
<p>于是<code>choosePort</code>这个函数解析完毕！</p>
<p><strong>但是本文还没有结束，知其然，知其所以然。所以我们来看看<code>detect-port-alt</code>这个库到底做了什么事</strong></p>
<h2 id="detect-port"><a href="#detect-port" class="headerlink" title="detect-port"></a>detect-port</h2><p>于该库的<code>lib</code>文件夹中，找到了对应的源码。先看一下整体的代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">port, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    resolve(realPort);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这个库提供了一个全局函数，它接受<code>port</code>和一个<code>callback</code>函数，并最终返回一个<code>realPort</code>真正可用的端口。和我们的使用直觉一致，那么展开来看看!</p>
<p>先看第一段，这是一段对入参的验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hostname = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> port === <span class="string">&#x27;object&#x27;</span> &amp;&amp; port) &#123;</span><br><span class="line">  hostname = port.hostname;</span><br><span class="line">  callback = port.callback;</span><br><span class="line">  port = port.port;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> port === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    callback = port;</span><br><span class="line">    port = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>port</code>是对象则手动拆解一下，如果只传了<code>callbak</code>则手动置空<code>port</code>。</p>
<p>接下来是对<code>port</code>的一些限制:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">port = <span class="built_in">parseInt</span>(port) || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> maxPort = port + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (maxPort &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">  maxPort = <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>冷知识: 最多只能打开65535个端口。呜呜呜我终于明白师父为什么用65535来代表不可能了呜呜呜</strong></p>
<p>然后就是本函数的核心之一,<code>tryListen</code>函数，字面意思，尝试监听某个端口。先看对应的<code>handleError</code>函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  port++;</span><br><span class="line">  <span class="keyword">if</span> (port &gt;= maxPort) &#123;</span><br><span class="line">    debug(<span class="string">&#x27;port: %s &gt;= maxPort: %s, give up and use random port&#x27;</span>, port, maxPort);</span><br><span class="line">    port = <span class="number">0</span>;</span><br><span class="line">    maxPort = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  tryListen(port, maxPort, hostname, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着是如果有<code>callback</code>那就把可用端口给出去，否则就默认<code>resolve</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> tryListen(port, maxPort, hostname, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这里可以发现，当监听端口发生错误的时候，将递归调用<code>tryListen</code>函数，一直到找到一个合适的为止。</p>
<p>接下来是对<code>hostname</code>的一段分析，如果用户提供了<code>hostname</code>，那直接监听对应的端口，调用<code>listen</code>函数就好了，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listen(port, hostname, <span class="function">(<span class="params">err, realPort</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.code === <span class="string">&#x27;EADDRNOTAVAIL&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;the ip that is not unkonwn on the machine&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handleError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callback(<span class="literal">null</span>, realPort);</span><br></pre></td></tr></table></figure>

<p>否则的话，就需要函数内部自己判断了:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. check null</span></span><br><span class="line">listen(port, <span class="literal">null</span>, <span class="function">(<span class="params">err, realPort</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ignore random listening</span></span><br><span class="line">  <span class="keyword">if</span> (port === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(err, realPort);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> handleError(err);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. check 0.0.0.0</span></span><br><span class="line">  listen(port, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> handleError(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. check localhost</span></span><br><span class="line">    listen(port, <span class="string">&#x27;localhost&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// if localhost refer to the ip that is not unkonwn on the machine, you will see the error EADDRNOTAVAIL</span></span><br><span class="line">      <span class="comment">// https://stackoverflow.com/questions/10809740/listen-eaddrnotavail-error-in-node-js</span></span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; err.code !== <span class="string">&#x27;EADDRNOTAVAIL&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleError(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. check current ip</span></span><br><span class="line">      listen(port, address.ip(), <span class="function">(<span class="params">err, realPort</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> handleError(err);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        callback(<span class="literal">null</span>, realPort);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>源码的注释写的很详细，就是首先检查<code>host=null</code>的时候，再检查<code>0.0.0.0</code>,然后是<code>localhost</code>，最后是用户本机<code>IP</code>。</p>
<p>最后，来看一个核心函数<code>listen</code>是怎么实现的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params">port, hostname, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> server = <span class="keyword">new</span> net.Server();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  server.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    debug(<span class="string">&#x27;listen %s:%s error: %s&#x27;</span>, hostname, port, err);</span><br><span class="line">    server.close();</span><br><span class="line">    <span class="keyword">if</span> (err.code === <span class="string">&#x27;ENOTFOUND&#x27;</span>) &#123;</span><br><span class="line">      debug(<span class="string">&#x27;ignore dns ENOTFOUND error, get free %s:%s&#x27;</span>, hostname, port);</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> callback(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 真正流程</span></span><br><span class="line">  server.listen(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    port = server.address().port;</span><br><span class="line">    server.close();</span><br><span class="line">    debug(<span class="string">&#x27;get free %s:%s&#x27;</span>, hostname, port);</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, port);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大失所望，搞了半天，就是用用户传入的<code>port</code>先起一个服务看看能不能用，如果报错就代表这个端口不可用，否则就代表是可用的。</p>
<p>可恶啊！我还以为有什么黑科技呢！所以这个库的本质就是一个函数的递归调用。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/node-modules/detect-port">detect-port</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
